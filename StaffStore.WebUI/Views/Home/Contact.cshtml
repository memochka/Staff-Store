@{
    ViewBag.Title = "Contacts";
}

<style>
    #map_canvas img {
        max-width: none;
    }
</style>

<!-- This css is to give a nice big popup "info window" when a marker is clicked on the map -->
<style>
    .infoDiv {
        height: 200px;
        width: 300px;
        -webkit-user-select: none;
        background-color: white;
    }
</style>

<h2>@ViewBag.Title</h2>

<address>
    Ukraine<br />
    Kharkiv, Sumska str. 56<br />
    Opening Hours: 9-7, Seven days a week<br />
    <abbr title="Phone">P:</abbr>
    057-458-25-47
</address>

<address>
    <strong>Support:</strong>   <a href="mailto:Support@example.com">Support@example.com</a><br />
    <strong>Marketing:</strong> <a href="mailto:Marketing@example.com">Marketing@example.com</a>
</address>

<br />
<!-- This is the div that will contain the Google Map -->
<div id="map_canvas" style="height: 550px;"></div>

<!-- Enclose the Javascript in a "section" so that it is rendered in the correct order after scripts have been loaded etc -->
@section scripts {
    <section class="scripts">

        <script type="text/javascript">

    <!-- This code tells the browser to execute the "initMap" method only when the complete document model has been loaded. -->
    $(document).ready(function () {
        initMap();
    });

    // Where all the fun happens
    function initMap() {

        // Google has tweaked their interface somewhat - this tells the api to use that new UI
        google.maps.visualRefresh = true;
            var Kharkiv = new google.maps.LatLng(50.003330, 36.235795);

        // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
        var mapOptions = {
            zoom: 17,
            center: Kharkiv,
            mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
        };

        // This makes the div with id "map_canvas" a google map
        var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);

        // a sample list of JSON encoded data in Kharkiv 
        // you can either make up a JSON list server side, or call it from a controller using JSONResult
        var data = [
            {
                "Id": 1, "PlaceName": "Staff Store",
                "Address": "Ukraine, Kharkiv, Sumska str. 56",
                "OpeningHours": "9-7, Seven days a week",               
                "Phone": "057-458-25-47",
                "GeoLong": "50.003330", "GeoLat": "36.235795"
            }
               ];

        // Using the JQuery "each" selector to iterate through the JSON list and drop marker pins
        $.each(data, function (i, item) {
            var marker = new google.maps.Marker({
                'position': new google.maps.LatLng(item.GeoLong, item.GeoLat),
                'map': map,
                'title': item.PlaceName
            });

            // Make the marker-pin blue!
            marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png')

            // put in some information about each json object - in this case, the opening hours.
            var infowindow = new google.maps.InfoWindow({
                content: "<div class='infoDiv'><h2>" +
                item.PlaceName + "</h2>" + "<div><h4>Address: " +
                item.Address + "</h4>" + "<div><h4>Opening hours: " +
                item.OpeningHours + "</h4>" + "<div><h4>Phone: " +
                item.Phone + "</h4></div ></div > "
            });

            // finally hook up an "OnClick" listener to the map so it pops up out info-window when the marker-pin is clicked!
            google.maps.event.addListener(marker, 'click', function () {
                infowindow.open(map, marker);
            });

        })
    }


        </script>
    </section>
}


